quarkus.application.name=aio-runner
quarkus.http.port=9090
quarkus.log.level=INFO
quarkus.ssl.native=true
quarkus.http.host=0.0.0.0
#quarkus.log.category."org.apache.kafka".level=ERROR
#quarkus.log.category."eu.neclab".level=DEBUG
#quarkus.vertx.event-loops-pool-size=32
#quarkus.native.additional-build-args=--allow-incomplete-classpath
mysettings.postgres.host=${dbhost:localhost}
mysettings.postgres.port=${dbport:5432}
mysettings.postgres.username=${dbuser:ngb}
mysettings.postgres.password=${dbpass:ngb}
mysettings.postgres.database-name=${dbname:ngb}
mysettings.gateway.host=${gateway.host:localhost}
mysettings.gateway.port=${gateway.port:9090}
atcontext.url=http://${mysettings.gateway.host}:${mysettings.gateway.port}/ngsi-ld/contextes/
jdbcurl=jdbc:postgresql://${mysettings.postgres.host}:${mysettings.postgres.port}/${mysettings.postgres.database-name}?ApplicationName=${quarkus.application.name}
scorpio.messaging.duplicate=true
scorpio.gatewayurl=http://localhost:9090
scorpio.directDB=true
scorpio.history.autorecording=notactive
scorpio.history.max-limit=1000
scorpio.history.default-limit=50
scorpio.history.batch-operations.create.max=1000
scorpio.history.batch-operations.upsert.max=1000
scorpio.history.batch-operations.update.max=1000
scorpio.history.batch-operations.delete.max=1000
scorpio.history.batch-operations.query.max=1000
scorpio.entity.max-limit=1000
scorpio.entity.default-limit=50
scorpio.entity.batch-operations.create.max=1000
scorpio.entity.batch-operations.upsert.max=1000
scorpio.entity.batch-operations.update.max=1000
scorpio.entity.batch-operations.delete.max=1000
scorpio.entity.batch-operations.query.max=1000
scorpio.registry.max-limit=1000
scorpio.registry.default-limit=50
scorpio.registry.autorecording=notactive
scorpio.registry.batch-operations.create.max=1000
scorpio.registry.batch-operations.upsert.max=1000
scorpio.registry.batch-operations.update.max=1000
scorpio.registry.batch-operations.delete.max=1000
scorpio.registry.batch-operations.query.max=1000
scorpio.topics.entity=ENTITY
scorpio.topics.registry=REGISTRY
scorpio.topics.temporal=TEMPORAL
scorpio.topics.internalnotification=I_NOTIFY
scorpio.topics.internalregsub=I_REGSUB
scorpio.topics.subalive=SUB_ALIVE
scorpio.topics.subsync=SUB_SYNC
scorpio.topics.regsubalive=REG_SUB_ALIVE
scorpio.topics.regsubsync=REG_SUB_SYNC
#Database settings
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${mysettings.postgres.username}
quarkus.datasource.password=${mysettings.postgres.password}
quarkus.datasource.jdbc.url=${jdbcurl}
quarkus.datasource.reactive.url=postgresql://${mysettings.postgres.host}:${mysettings.postgres.port}/${mysettings.postgres.database-name}
quarkus.datasource.reactive.shared=true
quarkus.datasource.reactive.max-size=20
#quarkus.datasource.reactive.event-loop-size=100
quarkus.flyway.migrate-at-start=true
quarkus.flyway.baseline-on-migrate=true
quarkus.flyway.connect-retries=10
selfhostcorecontext=http://localhost:9090/corecontext
ngsild.corecontext=https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld
mysettings.kafka.bootstrap.host=${bushost:localhost}
mysettings.kafka.bootstrap.port=${busport:9092}
bootstrap.servers=${mysettings.kafka.bootstrap.host}:${mysettings.kafka.bootstrap.port}
#Kafka settings
kafka.bootstrap.servers=${bootstrap.servers}
kafka.security.protocol=${KAFKA_SECURITY_PROTOCOL:SSL}
kafka.ssl.keystore.location=${KAFKA_SSL_KEYSTORE_LOCATION:/usr/src/scorpio/certs/dsh/keystore.jks}
kafka.ssl.keystore.password=${PWD_KEYSTORE:changeme}
kafka.ssl.key.password=${PWD_KEYSTORE:changeme}
kafka.ssl.truststore.location=${KAFKA_SSL_TRUSTSTORE_LOCATION:/usr/src/scorpio/certs/dsh/truststore.jks}
kafka.ssl.truststore.password=${PWD_TRUSTSTORE:changeme}
mp.messaging.incoming.registryretrieve.connector=smallrye-kafka
mp.messaging.incoming.registryretrieve.topic=${scorpio.topics.registry}
mp.messaging.incoming.registryretrieve.auto.offset.reset=latest
mp.messaging.incoming.registryretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.BaseRequestDeserializer
mp.messaging.outgoing.registry.topic=${scorpio.topics.registry}
mp.messaging.outgoing.registry.connector=smallrye-kafka
mp.messaging.outgoing.registry.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.BaseRequestSerializer
#readability block###########
mp.messaging.outgoing.entity.topic=${scorpio.topics.entity}
mp.messaging.outgoing.entity.connector=smallrye-kafka
mp.messaging.outgoing.entity.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.BaseRequestSerializer
mp.messaging.incoming.entityretrieve.connector=smallrye-kafka
mp.messaging.incoming.entityretrieve.topic=${scorpio.topics.entity}
mp.messaging.incoming.entityretrieve.auto.offset.reset=latest
mp.messaging.incoming.entityretrieve.broadcast=true
mp.messaging.incoming.entityretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.BaseRequestDeserializer
#readability block###########
mp.messaging.outgoing.history.connector=smallrye-kafka
mp.messaging.outgoing.history.topic=${scorpio.topics.temporal}
#readability block###########
mp.messaging.outgoing.isubs.topic=${scorpio.topics.internalregsub}
mp.messaging.outgoing.isubs.connector=smallrye-kafka
mp.messaging.outgoing.isubs.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SubscriptionRequestSerializer
mp.messaging.incoming.isubsretrieve.connector=smallrye-kafka
mp.messaging.incoming.isubsretrieve.topic=${scorpio.topics.internalregsub}
mp.messaging.incoming.isubsretrieve.auto.offset.reset=latest
mp.messaging.incoming.isubsretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SubscriptionRequestDeserializer
#readability block###########
mp.messaging.outgoing.inotification.topic=${scorpio.topics.internalnotification}
mp.messaging.outgoing.inotification.connector=smallrye-kafka
mp.messaging.outgoing.inotification.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.InternalNotificationSerializer
mp.messaging.incoming.inotificationretrieve.connector=smallrye-kafka
mp.messaging.incoming.inotificationretrieve.topic=${scorpio.topics.internalnotification}
mp.messaging.incoming.inotificationretrieve.auto.offset.reset=latest
mp.messaging.incoming.inotificationretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.InternalNotificationDeserializer
#readability block###########
mp.messaging.outgoing.subalive.connector=smallrye-kafka
mp.messaging.outgoing.subalive.topic=${scorpio.topics.subalive}
mp.messaging.outgoing.subalive.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.AliveAnnouncementSerializer
mp.messaging.incoming.subaliveretrieve.connector=smallrye-kafka
mp.messaging.incoming.subaliveretrieve.topic=${scorpio.topics.subalive}
mp.messaging.incoming.subaliveretrieve.auto.offset.reset=latest
mp.messaging.incoming.subaliveretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.AliveAnnouncementDeserializer
#readability block###########
mp.messaging.outgoing.subsync.connector=smallrye-kafka
mp.messaging.outgoing.subsync.topic=${scorpio.topics.subsync}
mp.messaging.outgoing.subsync.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SyncMessageSerializer
mp.messaging.incoming.subsyncretrieve.connector=smallrye-kafka
mp.messaging.incoming.subsyncretrieve.topic=${scorpio.topics.subsync}
mp.messaging.incoming.subsyncretrieve.auto.offset.reset=latest
mp.messaging.incoming.subsyncretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SyncMessageDeserializer
#readability block###########
mp.messaging.outgoing.regsubalive.connector=smallrye-kafka
mp.messaging.outgoing.regsubalive.topic=${scorpio.topics.regsubalive}
mp.messaging.outgoing.regsubalive.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.AliveAnnouncementSerializer
mp.messaging.incoming.regsubaliveretrieve.connector=smallrye-kafka
mp.messaging.incoming.regsubaliveretrieve.topic=${scorpio.topics.regsubalive}
mp.messaging.incoming.regsubaliveretrieve.auto.offset.reset=latest
mp.messaging.incoming.regsubaliveretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.AliveAnnouncementDeserializer
#readability block###########
mp.messaging.outgoing.regsubsync.connector=smallrye-kafka
mp.messaging.outgoing.regsubsync.topic=${scorpio.topics.regsubsync}
mp.messaging.outgoing.regsubsync.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SyncMessageSerializer
mp.messaging.incoming.regsubsyncretrieve.connector=smallrye-kafka
mp.messaging.incoming.regsubsyncretrieve.topic=${scorpio.topics.regsubsync}
mp.messaging.incoming.regsubsyncretrieve.auto.offset.reset=latest
mp.messaging.incoming.regsubsyncretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SyncMessageDeserializer
